use serde::{Serialize, Deserialize};

    #[derive(Serialize, Deserialize)]
    struct NostrKey {
        private_key: [u8; 32],
        public_key: [u8; 33],
    }

use sodiumoxide::crypto::box_;

pub fn generate_nostr_keypair() -> NostrKey {
        sodiumoxide::init().expect("Failed to initialize sodiumoxide");
        let (public_key, private_key) = box_::gen_keypair();
        NostrKey {
            private_key: private_key.0,
            public_key: public_key.0,
        }
    }

use std::fs::File;
    use std::io::{Write, Read};

    pub fn store_key(key: &NostrKey, file_path: &str) -> std::io::Result<()> {
        let serialized_key = serde_json::to_string(&key)?;
        let mut file = File::create(file_path)?;
        write!(file, "{}", serialized_key)?;
        Ok(())
    }

pub fn load_key(file_path: &str
